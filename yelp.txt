
Part 1: Yelp Dataset Profiling and Understanding
1. Profile the data by finding the total number of records for
each of the tables below:
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000

CODE
SELECT COUNT(*)
FROM table

2.
i. Business = id: 10000
ii. Hours = business_id: 1562
iii. Category = business_id: 2643
iv. Attribute = business_id: 1115
v. Review = id: 10000, business_id: 8090, user_id: 9581
vi. Checkin = business_id: 493
vii. Photo = id: 10000, photo: 6493
viii. Tip = user_id: 537, business_id: 3979
ix. User = id: 10000
x. Friend = user_id: 11
xi. Elite_years = user_id: 2780

CODE
the variable is the yellow marker in the field

SELECT COUNT(DISTINCT variable)
FROM table

3. 
Answer: no

CODE 

 SELECT COUNT(*)
FROM user
WHERE id IS NULL
OR name IS NULL
OR review_count IS NULL
OR yelping_since IS NULL
OR useful IS NULL
OR funny IS NULL
OR cool IS NULL
OR fans IS NULL
OR average_stars IS NULL
OR compliment_hot IS NULL
OR compliment_more IS NULL
OR compliment_profile IS NULL
OR compliment_cute IS NULL
OR compliment_list IS NULL
OR compliment_note IS NULL
OR compliment_plain IS NULL
OR compliment_cool IS NULL
OR compliment_funny IS NULL
OR compliment_writer IS NULL
OR compliment_photos IS NULL

4. 
i. Table: Review, Column: Stars
min: 1 max: 5 avg: 3.7082

ii. Table: Business, Column: Stars
min: 1.0 max: 5.0 avg: 3.6549

iii. Table: Tip, Column: Likes
min: 0 max: 2 avg: 0.0144

iv. Table: Checkin, Column: Count
min: 1 max: 53 avg: 1.9414

v. Table: User, Column: Review_count
min: 0 max: 2000 avg: 24.2995

CODE

SELECT MIN(Column),
MAX(Column),
AVG(Column)
FROM table

5. 

SELECT city,
SUM(review_count) AS num
FROM business
GROUP BY city
ORDER BY num DESC

 Result:
+-----------------+-------+
| city            |   NUM |
+-----------------+-------+
| Las Vegas       | 82854 |
| Phoenix         | 34503 |
| Toronto         | 24113 |
| Scottsdale      | 20614 |
| Charlotte       | 12523 |
| Henderson       | 10871 |
| Tempe           | 10504 |
| Pittsburgh      |  9798 |
| Montréal        |  9448 |
| Chandler        |  8112 |
| Mesa            |  6875 |
| Gilbert         |  6380 |
| Cleveland       |  5593 |
| Madison         |  5265 |
| Glendale        |  4406 |
| Mississauga     |  3814 |
| Edinburgh       |  2792 |
| Peoria          |  2624 |
| North Las Vegas |  2438 |
| Markham         |  2352 |
| Champaign       |  2029 |
| Stuttgart       |  1849 |
| Surprise        |  1520 |
| Lakewood        |  1465 |
| Goodyear        |  1155 |
+-----------------+-------+
(Output limit exceeded, 25 of 362 total rows shown)

6.
i. Avon
CODE:
SELECT SUM(review_count) AS Numbers,
 stars
FROM business
WHERE city = "Avon"
GROUP BY stars
 Resulting Table 
+---------+-------+
| Numbers | stars |
+---------+-------+
|      10 |   1.5 |
|       6 |   2.5 |
|      88 |   3.5 |
|      21 |   4.0 |
|      31 |   4.5 |
|       3 |   5.0 |
+---------+-------+
ii. Beachwood
SELECT SUM(review_count) AS Numbers,
 stars
FROM business
WHERE city = "Beachwood"
GROUP BY stars
 Resulting Table 
 +---------+-------+
| Numbers | stars |
+---------+-------+
|       8 |   2.0 |
|       3 |   2.5 |
|      11 |   3.0 |
|       6 |   3.5 |
|      69 |   4.0 |
|      17 |   4.5 |
|      23 |   5.0 |
+---------+-------+

7. 
SELECT  review_count,
name
FROM user
order by review_count desc
limit 3

 Result 
 +--------------+--------+
| review_count | name   |
+--------------+--------+
|         2000 | Gerald |
|         1629 | Sara   |
|         1339 | Yuri   |
+--------------+--------+

8. 
Not necessarily there is no linear correlation between the 2, we can see that Amy, who has the most
fans has 609 reviews and Yuri has a little amount fans but has the
third most reviews.

SELECT  review_count,
name,
fans
FROM user
order by fans desc

+--------------+-----------+------+
| review_count | name      | fans |
+--------------+-----------+------+
|          609 | Amy       |  503 |
|          968 | Mimi      |  497 |
|         1153 | Harald    |  311 |
|         2000 | Gerald    |  253 |
|          930 | Christine |  173 |
|          813 | Lisa      |  159 |
|          377 | Cat       |  133 |
|         1215 | William   |  126 |
|          862 | Fran      |  124 |
|          834 | Lissa     |  120 |
|          861 | Mark      |  115 |
|          408 | Tiffany   |  111 |
|          255 | bernice   |  105 |
|         1039 | Roanna    |  104 |
|          694 | Angela    |  101 |
|         1246 | .Hon      |  101 |
|          307 | Ben       |   96 |
|          584 | Linda     |   89 |
|          842 | Christina |   85 |
|          220 | Jessica   |   84 |
|          408 | Greg      |   81 |
|          178 | Nieves    |   80 |
|          754 | Sui       |   78 |
|         1339 | Yuri      |   76 |
|          161 | Nicole    |   73 |
+--------------+-----------+------+
(Output limit exceeded, 25 of 10000 total rows shown)

9. 
 Yes. There are 1780 reviews with “love” and 232
reviews with “hate”

SELECT COUNT(*)
FROM review
WHERE text like "%love%"
SELECT COUNT(*)
FROM review
WHERE text like “%hate%”

10. 
select fans, 
name
from user
order by fans desc
limit 10

Result 
+------+-----------+
| fans | name      |
+------+-----------+
|  503 | Amy       |
|  497 | Mimi      |
|  311 | Harald    |
|  253 | Gerald    |
|  173 | Christine |
|  159 | Lisa      |
|  133 | Cat       |
|  126 | William   |
|  124 | Fran      |
|  120 | Lissa     |
+------+-----------+


Part 2: Inferences and Analysis
1.
in Charlotte and Shopping Yes they do.
+-------------------------+-----------+----------+-------+----------------------+
| name                    | city      | category | stars | hours                |
+-------------------------+-----------+----------+-------+----------------------+
| Dilworth Custom Framing | Charlotte | Shopping |   3.5 | Saturday|10:00-15:00 |
| HighLife North Tryon    | Charlotte | Shopping |   4.0 | Saturday|12:00-22:00 |
+-------------------------+-----------+----------+-------+----------------------+


business.review_count,
business.address,
business.postal_code

ii. 
Yes. 
+-------------------------+-----------+----------+-------+----------------------+--------------+
| name                    | city      | category | stars | hours                | review_count |
+-------------------------+-----------+----------+-------+----------------------+--------------+
| Dilworth Custom Framing | Charlotte | Shopping |   3.5 | Saturday|10:00-15:00 |            6 |
| HighLife North Tryon    | Charlotte | Shopping |   4.0 | Saturday|12:00-22:00 |            5 |
+-------------------------+-----------+----------+-------+----------------------+--------------+


iii. Are you able to infer anything from the location data
provided between these two groups? Explain.
No. They have different locations. and i have never been to Charlotte;)
+-------------------------+-----------+----------+-------+----------------------+-------------------------+-------------+
| name                    | city      | category | stars | hours                | address                 | postal_code |
+-------------------------+-----------+----------+-------+----------------------+-------------------------+-------------+
| Dilworth Custom Framing | Charlotte | Shopping |   3.5 | Saturday|10:00-15:00 | 125 Remount Rd, Ste C-2 | 28203       |
| HighLife North Tryon    | Charlotte | Shopping |   4.0 | Saturday|12:00-22:00 | 9605 N Tryon St, Ste C  | 28262       |
+-------------------------+-----------+----------+-------+----------------------+-------------------------+-------------+

SQL code used for analysis:
SELECT
business.name,
business.city,
category.category,
business.stars,
hours.hours,
business.review_count,
business.address,
business.postal_code
FROM (business INNER JOIN category ON business.id = 
category.business_id) INNER JOIN hours ON hours.business_id =
business.id
WHERE business.city = 'Charlotte' AND category.category = "Shopping"
GROUP BY business.stars;


2. 
i.  open ones have more reviews on
average than ones that are closed

ii.  more business that are still open are listed as
“useful” or “funny”.


SQL code used for analysis:
SELECT
AVG(b.stars),
SUM(b.review_count),
AVG(b.review_count),
COUNT(r.useful)+COUNT(r.funny),
open
FROM business b INNER JOIN review r ON b.id = r.id
GROUP BY b.open
Results:
+---------------+---------------------+---------------------+--------------------------------+---------+
|  AVG(b.stars) | SUM(b.review_count) | AVG(b.review_count) | COUNT(r.useful)+COUNT(r.funny) | is_open |
+---------------+---------------------+---------------------+--------------------------------+---------+
|           2.0 |                   4 |                 4.0 |                              2 |       0 |
| 2.96153846154 |                 504 |       38.7692307692 |                             26 |       1 |
+---------------+---------------------+---------------------+--------------------------------+---------+

3. 
 For this I have chosen to count the total number of stars for every type of restaurant and count
 the number of reviews and based on that to determine what is the most popular food in the yelp 
 guide by the number of stars awarded in every city. This shows us that people in edinburgh are
 very pleased with the mexican restaurants in the city and are likely to give many stars if they 
 have enjoyed the meal   

iii. 
 +----------+-------+-------+--------+-----------+
| category | total | stars | review | city      |
+----------+-------+-------+--------+-----------+
| Mexican  |    28 | 101.5 |   2044 | Edinburgh |
| Japanese |    20 |  69.5 |    457 | Toronto   |
| Chinese  |    13 |  49.0 |   5502 | Las Vegas |
| Italian  |    13 |  46.0 |   1017 | Montréal  |
| Indian   |     6 |  21.0 |    192 | Aurora    |
+----------+-------+-------+--------+-----------+

iv. SELECT c.category,
COUNT(b.name) AS total,
sum(stars) as stars,
sum(review_count) as review,
b.city
FROM (business b INNER JOIN hours h ON b.id = h.business_id)
INNER JOIN category c ON c.business_id = b.id
WHERE c.category IN
("Chinese","Mexican","Italian","Japanese","Indian")
GROUP BY c.category
ORDER BY sum(stars) DESC